{"version":3,"file":"static/js/654.8f131005.chunk.js","mappings":"0PAyBA,EAvBgB,SAAC,GAAgC,IAA9BA,EAA6B,EAA7BA,aAAcC,EAAe,EAAfA,SAC/B,GAA0BC,EAAAA,EAAAA,WAAS,UAAKF,IAAxC,eAAOG,EAAP,KAAcC,EAAd,KAEMC,GAAeC,EAAAA,EAAAA,cACnB,YAAiB,IAAdC,EAAa,EAAbA,OACOC,EAAgBD,EAAhBC,KAAMC,EAAUF,EAAVE,MACdL,GAAS,SAAAM,GACP,OAAO,kBAAKA,GAAZ,cAAwBF,EAAOC,GAChC,GACF,GACD,CAACL,IAUH,MAAO,CAAED,MAAAA,EAAOC,SAAAA,EAAUC,aAAAA,EAAcM,aAPnB,SAAAC,GACnBA,EAAEC,iBACFZ,GAAS,UAAKE,IACdW,QAAQC,IAAIZ,EAAO,QAEpB,EAGF,E,UCjBD,EANqB,CACnBK,KAAM,GACNQ,MAAO,GACPC,SAAU,ICqBZ,EAxBe,CACbT,KAAM,CACJU,KAAM,OACNV,KAAM,OACNW,UAAU,EACVC,MAAO,QACPC,YAAa,aAEfL,MAAO,CACLE,KAAM,QACNV,KAAM,QACNW,UAAU,EACVC,MAAO,SACPC,YAAa,cAEfJ,SAAU,CACRC,KAAM,WACNV,KAAM,WACNW,UAAU,EACVC,MAAO,YACPC,YAAa,kBCnBjB,EAAwB,4BAAxB,EAA2D,2B,SC+D3D,EAvCqB,SAAC,GAAkB,IAAhBpB,EAAe,EAAfA,SACtB,EAA8CqB,EAAQ,CACpDtB,aAAAA,EACAC,SAAAA,IAFME,EAAR,EAAQA,MAAOE,EAAf,EAAeA,aAAcM,EAA7B,EAA6BA,aAK7BG,QAAQC,IAAIZ,EAAO,gBAEnB,IAAQK,EAA0BL,EAA1BK,KAAMQ,EAAoBb,EAApBa,MAAOC,EAAad,EAAbc,SAErB,OACE,iCACE,eAAIM,UAAWC,EAAf,oCAEA,kBAAMvB,SAAUU,EAAcY,UAAWC,EAAzC,WACE,SAACC,EAAA,GAAD,QAAWhB,MAAOD,EAAMH,aAAcA,GAAkBqB,EAAAA,QACxD,SAACD,EAAA,GAAD,QACEhB,MAAOO,EACPX,aAAcA,GACVqB,EAAAA,SAEN,SAACD,EAAA,GAAD,QACEhB,MAAOQ,EACPZ,aAAcA,GACVqB,EAAAA,YAEN,mBAAQR,KAAK,SAAb,2BAWP,EC1CD,EAdqB,WACnB,IAAMS,GAAWC,EAAAA,EAAAA,MAMjB,OACE,+BACE,SAAC,EAAD,CAAc3B,SANG,SAAA4B,GACnBF,GAASG,EAAAA,EAAAA,GAAOD,GACjB,KAOF,C,mGCjBD,EAA0B,2BAA1B,EAA6D,yBAA7D,EAA8F,yB,oCCiB9F,EAXkB,SAAC,GAAqC,IAApCT,EAAmC,EAAnCA,MAAOf,EAA4B,EAA5BA,aAAiB0B,GAAW,YAC7CC,GAAKC,EAAAA,EAAAA,UAAQ,kBAAKC,EAAAA,EAAAA,KAAL,GAAe,IAElC,OACI,iBAAKX,UAAWC,EAAhB,WACI,kBAAOW,QAASH,EAAIT,UAAWC,EAA/B,SAA2CJ,KAC3C,kCAAOY,GAAIA,EAAII,SAAU/B,GAAkB0B,GAA3C,IAAkDR,UAAWC,OAGxE,C,wDCfM,IAkBIU,EAAS,eAACG,EAAD,uDAAQ,GAAR,OAClBC,OAAOC,gBAAgB,IAAIC,WAAWH,IAAOI,QAAO,SAACT,EAAIU,GAWvD,OAREV,IAFFU,GAAQ,IACG,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,GAGT,GAAE,GAbe,C","sources":["shared/hooks/useForm.js","modules/RegisterForm/initialState.js","modules/RegisterForm/fields.js","webpack://goit-react-hw-08-phonebook/./src/modules/RegisterForm/RegisterForm.module.css?281d","modules/RegisterForm/RegisterForm.jsx","pages/RegisterPage/RegisterPage.jsx","webpack://goit-react-hw-08-phonebook/./src/shared/components/TextField/TextField.module.css?2d5d","shared/components/TextField/TextField.jsx","../node_modules/nanoid/index.browser.js"],"sourcesContent":["import { useState, useCallback } from 'react';\n\nconst useForm = ({ initialState, onSubmit }) => {\n  const [state, setState] = useState({ ...initialState });\n\n  const handleChange = useCallback(\n    ({ target }) => {\n      const { name, value } = target;\n      setState(prevState => {\n        return { ...prevState, [name]: value };\n      });\n    },\n    [setState]\n  );\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    onSubmit({ ...state });\n    console.log(state, 'state');\n    // setState({ ...initialState });\n  };\n\n  return { state, setState, handleChange, handleSubmit };\n};\n\nexport default useForm;\n","const initialState = {\n  name: '',\n  email: '',\n  password: '',\n};\n\nexport default initialState;\n","const fields = {\n  name: {\n    type: 'text',\n    name: 'name',\n    required: true,\n    label: 'Name:',\n    placeholder: 'User name',\n  },\n  email: {\n    type: 'email',\n    name: 'email',\n    required: true,\n    label: 'Email:',\n    placeholder: 'User email',\n  },\n  password: {\n    type: 'password',\n    name: 'password',\n    required: true,\n    label: 'Password:',\n    placeholder: 'User password',\n  },\n};\n\nexport default fields;\n","// extracted by mini-css-extract-plugin\nexport default {\"title\":\"RegisterForm_title__XvlH+\",\"form\":\"RegisterForm_form__Rm9pY\"};","import * as React from 'react';\n\nimport useForm from 'shared/hooks/useForm';\n\n// import HowToRegIcon from '@mui/icons-material/HowToReg';\n// import { styled } from '@mui/material/styles';\n// import { Button } from '@mui/material';\n// import { blue } from '@mui/material/colors';\n\nimport TextField from 'shared/components/TextField/TextField';\n\nimport initialState from './initialState';\nimport fields from './fields';\n\nimport css from './RegisterForm.module.css';\n\n// const ColorButton = styled(Button)(({ theme }) => ({\n//   color: theme.palette.getContrastText(blue[200]),\n//   backgroundColor: blue[200],\n//   //   color:blueGrey[200],\n//   '&:hover': {\n//     backgroundColor: blue[500],\n//   },\n// }));\n\nconst RegisterForm = ({ onSubmit }) => {\n  const { state, handleChange, handleSubmit } = useForm({\n    initialState,\n    onSubmit,\n  });\n  \n  console.log(state, \"RegisterForm\")\n\n  const { name, email, password } = state;\n\n  return (\n    <>\n      <h2 className={css.title}>New user registration</h2>\n\n      <form onSubmit={handleSubmit} className={css.form}>\n        <TextField value={name} handleChange={handleChange} {...fields.name} />\n        <TextField\n          value={email}\n          handleChange={handleChange}\n          {...fields.email}\n        />\n        <TextField\n          value={password}\n          handleChange={handleChange}\n          {...fields.password}\n        />\n        <button type=\"submit\">Register</button>\n        \n        {/* <ColorButton endIcon={<HowToRegIcon />} variant=\"contained\">\n        Register\n      </ColorButton> */}\n        {/* <Button endIcon={<HowToRegIcon />} variant=\"contained\" >\n        Register\n      </Button> */}\n      </form>\n    </>\n  );\n};\n\nexport default RegisterForm;\n\n","import { useDispatch } from 'react-redux';\n\nimport { signup } from 'redux/auth/auth-operations';\n\nimport RegisterForm from 'modules/RegisterForm/RegisterForm';\n\nconst RegisterPage = () => {\n  const dispatch = useDispatch();\n\n  const handleSignup = data => {\n    dispatch(signup(data));\n  };\n\n  return (\n    <>\n      <RegisterForm onSubmit={handleSignup} />\n    </>\n  );\n};\n\nexport default RegisterPage;\n","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"TextField_wrapper__OQN5w\",\"label\":\"TextField_label__PQj1k\",\"input\":\"TextField_input__Oi20a\"};","import { useMemo } from \"react\";\n\nimport { nanoid } from \"nanoid\";\n\nimport css from \"./TextField.module.css\"\n\n\nconst TextField = ({label, handleChange, ...props}) => {\n    const id = useMemo(()=> nanoid(), []);\n\n    return (\n        <div className={css.wrapper}>\n            <label htmlFor={id} className={css.label}>{label}</label>\n            <input id={id} onChange={handleChange} {...props} className={css.input}/>\n        </div>\n    )\n}\n\nexport default TextField;","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n"],"names":["initialState","onSubmit","useState","state","setState","handleChange","useCallback","target","name","value","prevState","handleSubmit","e","preventDefault","console","log","email","password","type","required","label","placeholder","useForm","className","css","TextField","fields","dispatch","useDispatch","data","signup","props","id","useMemo","nanoid","htmlFor","onChange","size","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase"],"sourceRoot":""}